{"version":3,"sources":["details.jsx","selectCity.jsx","spinner.jsx","weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Details","props","current","data","react_default","a","createElement","className","location","name","width","height","src","weather_icons","alt","style","fontSize","color","localtime","temperature","feelslike","weather_descriptions","wind_speed","wind_dir","pressure","precip","humidity","SelectCity","state","options","show","updateOptions","e","input","target","value","i","l","_this","cityArray","length","toUpperCase","includes","push","updateCity","setState","dontShow","enterKeyPressed","keyCode","search","selectedCity","_this2","this","window","addEventListener","document","getElementById","contains","id","placeholder","type","onFocus","onKeyDown","onChange","size","handleChange","slice","map","element","Component","Spinner","react_loading_default","Weather","spinner","message","selected","city","fetch","concat","then","response","json","myJson","hasOwnProperty","error","code","getCurrentCityWeather","res","myjson","cities","details","selectCity","onClick","App","weather","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PA2DeA,SAzDC,SAAAC,GACd,IAAMC,EAAUD,EAAME,KAAKD,QAC3B,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZN,EAAME,KAAKK,SAASC,KACrBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OACEI,MAAM,KACNC,OAAO,KACPC,IAAKV,EAAQW,cAAc,GAC3BC,IAAI,cAIhBV,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAAEC,SAAU,QAASC,MAAO,UAAYhB,EAAME,KAAKK,SAASU,YAEpEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeL,EAAQiB,YAAtC,UAEFf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeL,EAAQkB,UAAtC,WAGFhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,cACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeL,EAAQmB,qBAAqB,KAG7DjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,SACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZL,EAAQoB,WADX,QAC4BpB,EAAQqB,WAItCnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,aACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeL,EAAQsB,SAAtC,SAGFpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,kBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeL,EAAQuB,OAAtC,SAGFrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,aACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeL,EAAQwB,SAAtC,gBCQOC,6MA3DbC,MAAQ,CAAEC,QAAS,GAAIC,MAAM,KAC7BC,cAAgB,SAAAC,GAGd,IAFA,IAAIC,EAAQD,EAAEE,OAAOC,MACjBN,EAAU,GACLO,EAAI,EAAGC,EAAIC,EAAKrC,MAAMsC,UAAUC,OAAQJ,EAAIC,EAAGD,IAClDE,EAAKrC,MAAMsC,UAAUH,GAAGK,cAAcC,SAAST,EAAMQ,gBACvDZ,EAAQc,KAAKL,EAAKrC,MAAMsC,UAAUH,IAGtCE,EAAKrC,MAAM2C,WAAWf,EAAQ,IAC9BS,EAAKO,SAAS,CAAEhB,eAElBC,KAAO,WACLQ,EAAKO,SAAS,CAAEf,MAAM,OAExBgB,SAAW,WACTR,EAAKO,SAAS,CAAEf,MAAM,OASxBiB,gBAAkB,SAAAf,GACE,KAAdA,EAAEgB,SACJV,EAAKrC,MAAMgD,OAAOX,EAAKrC,MAAMiD,kGATb,IAAAC,EAAAC,KAClBC,OAAOC,iBAAiB,QAAS,SAAAtB,GAC1BuB,SAASC,eAAe,cAAcC,SAASzB,EAAEE,SACpDiB,EAAKL,8CAUT,OACE1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBmD,GAAG,cACpCtD,EAAAC,EAAAC,cAAA,SACEqD,YAAY,gBACZpD,UAAU,eACVqD,KAAK,OACLC,QAAST,KAAKtB,KACdgC,UAAWV,KAAKL,gBAChBgB,SAAUX,KAAKrB,gBAGhBqB,KAAKxB,MAAME,MAAQsB,KAAKxB,MAAMC,QAAQW,OAAS,EAC9CpC,EAAAC,EAAAC,cAAA,UACEC,UAAU,iCACVyD,KAAK,IACL7B,MAAOiB,KAAKnD,MAAMiD,aAClBa,SAAUX,KAAKnD,MAAMgE,cAEpBb,KAAKxB,MAAMC,QAAQqC,MAAM,EAAG,KAAKC,IAAI,SAAAC,GAAO,OAC3ChE,EAAAC,EAAAC,cAAA,UAAQ6B,MAAOiC,GAAUA,MAG3B,aAtDaC,6BCgBVC,EAdC,WACd,OACElE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACiE,EAAAlE,EAAD,CACEuD,KAAM,kBACN3C,MAAO,UACPN,OAAQ,OACRD,MAAO,YCgFF8D,6MArFb5C,MAAQ,CACNzB,KAAM,GACNoC,UAAW,GACXW,aAAc,GACduB,SAAS,EACTC,QAAS,MAGXT,aAAe,SAAAjC,GAEb,IADA,IAAIH,EAAUG,EAAEE,OAAOL,QACdO,EAAI,EAAGC,EAAIR,EAAQW,OAAQJ,EAAIC,EAAGD,IACrCP,EAAQO,GAAGuC,UACbrC,EAAKO,SAAS,CAAEK,aAAcrB,EAAQO,GAAGD,WAI/Cc,OAAS,SAAA2B,GACPtC,EAAKO,SAAS,CAAE4B,SAAS,IAEzBI,MAAK,kDAAAC,OADQ,mCACR,WAAAA,OAAoEF,IACtEG,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACAA,EAAOC,eAAe,SACE,OAAtBD,EAAOE,MAAMC,KAAe/C,EAAKgD,wBACN,OAAtBJ,EAAOE,MAAMC,MACpB/C,EAAKO,SAAS,CAAE6B,QAASQ,EAAOE,MAAMV,QAASD,SAAS,IACrDnC,EAAKO,SAAS,CAAE1C,KAAM+E,EAAQT,SAAS,EAAOC,QAAS,UAGpEY,sBAAwB,WACtBT,MAAM,mCACHE,KAAK,SAAAQ,GACJ,OAAOA,EAAIN,SAEZF,KAAK,SAAAS,GACJ,OAAOA,EAAOZ,OAEfG,KAAK,SAAAH,GACJtC,EAAKW,OAAO2B,yFAIhB,IAAIrC,EAAYkD,EAAOtB,IAAI,SAAAS,GACzB,OAAOA,EAAKnE,OAEd2C,KAAKP,SAAS,CAAEN,cAChBa,KAAKkC,yDAEE,IAAAnC,EAAAC,KACP,OACEhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,YACG8C,KAAKxB,MAAM6C,QACVrE,EAAAC,EAAAC,cAACmE,EAAD,MAEArE,EAAAC,EAAAC,cAAA,YACiC,IAA9B8C,KAAKxB,MAAM8C,QAAQlC,OAClBpC,EAAAC,EAAAC,cAACoF,EAAD,CAASvF,KAAMiD,KAAKxB,MAAMzB,OAE1BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAW6C,KAAKxB,MAAM8C,UAI3CtE,EAAAC,EAAAC,cAACqF,EAAD,CACE/C,WAAY,SAAAgC,GAAI,OAAIzB,EAAKN,SAAS,CAAEK,aAAc0B,KAClDrC,UAAWa,KAAKxB,MAAMW,UACtBW,aAAcE,KAAKxB,MAAMsB,aACzBe,aAAcb,KAAKa,aACnBhB,OAAQG,KAAKH,SAEf7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,eACVqF,QAAS,kBAAMzC,EAAKF,OAAOE,EAAKvB,MAAMsB,gBAFxC,oBA1EUmB,aCSPwB,mLARX,OACEzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwF,EAAD,cAJUzB,aCQE0B,QACW,cAA7B1C,OAAO7C,SAASwF,UAEe,UAA7B3C,OAAO7C,SAASwF,UAEhB3C,OAAO7C,SAASwF,SAASC,MACvB,2DCZNC,IAASC,OAAO/F,EAAAC,EAAAC,cAAC8F,EAAD,MAAS7C,SAASC,eAAe,SD2H3C,kBAAmB6C,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.89b1e42b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Details = props => {\n  const current = props.data.current;\n  return (\n    <div className=\"table\">\n      <div className=\"row clock\">\n        <div className=\"name\">\n          {props.data.location.name}\n          <div className=\"image\">\n            <img\n              width=\"30\"\n              height=\"30\"\n              src={current.weather_icons[0]}\n              alt=\"weather\"\n            />\n          </div>\n        </div>\n\t\t<div style={{ fontSize: \"1.1em\", color: \"white\" }}>{props.data.location.localtime}</div>\n      </div>\n      <div className=\"row\">\n        <div className=\"title cell\">Temperature:</div>\n        <div className=\"result cell\">{current.temperature}°C</div>\n      </div>\n      <div className=\"row\">\n        <div className=\"title cell\">Feels Like:</div>\n        <div className=\"result cell\">{current.feelslike}°C </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"title cell\">Condition:</div>\n        <div className=\"result cell\">{current.weather_descriptions[0]}</div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"title cell\">Wind:</div>\n        <div className=\"result cell\">\n          {current.wind_speed} mph {current.wind_dir}\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"title cell\">Pressure:</div>\n        <div className=\"result cell\">{current.pressure} in </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"title cell\">Precipitation:</div>\n        <div className=\"result cell\">{current.precip} mm </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"title cell\">Humidity:</div>\n        <div className=\"result cell\">{current.humidity} </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Details;\n","import React, { Component } from \"react\";\nclass SelectCity extends Component {\n  state = { options: [], show: false };\n  updateOptions = e => {\n    let input = e.target.value;\n    let options = [];\n    for (let i = 0, l = this.props.cityArray.length; i < l; i++) {\n      if (this.props.cityArray[i].toUpperCase().includes(input.toUpperCase())) {\n        options.push(this.props.cityArray[i]);\n      }\n    }\n    this.props.updateCity(options[0]);\n    this.setState({ options });\n  };\n  show = () => {\n    this.setState({ show: true });\n  };\n  dontShow = () => {\n    this.setState({ show: false });\n  };\n  componentDidMount() {\n    window.addEventListener(\"click\", e => {\n      if (!document.getElementById(\"option-box\").contains(e.target)) {\n        this.dontShow();\n      }\n    });\n  }\n  enterKeyPressed = e => {\n    if (e.keyCode === 13) {\n      this.props.search(this.props.selectedCity);\n    }\n  };\n  render() {\n    return (\n      <div className=\"row option-select\" id=\"option-box\">\n        <input\n          placeholder=\"search cities\"\n          className=\"form-control\"\n          type=\"text\"\n          onFocus={this.show}\n          onKeyDown={this.enterKeyPressed}\n          onChange={this.updateOptions}\n        />\n\n        {this.state.show && this.state.options.length > 0 ? (\n          <select\n            className=\"form-control option-collection\"\n            size=\"3\"\n            value={this.props.selectedCity}\n            onChange={this.props.handleChange}\n          >\n            {this.state.options.slice(0, 100).map(element => (\n              <option value={element}>{element}</option>\n            ))}\n          </select>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default SelectCity;\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\n\nconst Spinner = () => {\n  return (\n    <div className=\"table\">\n      <div className=\"spinner\">\n        <ReactLoading\n          type={\"spinningBubbles\"}\n          color={\"#5bc0de\"}\n          height={\"100%\"}\n          width={\"100%\"}\n        />\n      </div>\n    </div>\n  );\n};\nexport default Spinner;\n","import React, { Component } from \"react\";\nimport Details from \"./details\";\nimport cities from \"cities.json\";\nimport SelectCity from \"./selectCity\";\nimport Spinner from \"./spinner\";\nclass Weather extends Component {\n  state = {\n    data: {},\n    cityArray: [],\n    selectedCity: \"\",\n    spinner: true,\n    message: \"\"\n  };\n\n  handleChange = e => {\n    let options = e.target.options;\n    for (let i = 0, l = options.length; i < l; i++) {\n      if (options[i].selected) {\n        this.setState({ selectedCity: options[i].value });\n      }\n    }\n  };\n  search = city => {\n    this.setState({ spinner: true });\n\tconst API_KEY = '8805db7f763df68be75af049e2cc6a6f';\n    fetch(`http://api.weatherstack.com/current?access_key=${API_KEY}&query=${city}`)\n      .then(response => {\n        return response.json();\n      })\n      .then(myJson => {\n        if (myJson.hasOwnProperty(\"error\")) {\n          if (myJson.error.code === 1003) this.getCurrentCityWeather();\n          else if (myJson.error.code === 1006)\n            this.setState({ message: myJson.error.message, spinner: false });\n        } else this.setState({ data: myJson, spinner: false, message: \"\" });\n      });\n  };\n  getCurrentCityWeather = () => {\n    fetch(\"https://json.geoiplookup.io/api\")\n      .then(res => {\n        return res.json();\n      })\n      .then(myjson => {\n        return myjson.city;\n      })\n      .then(city => {\n        this.search(city);\n      });\n  };\n  componentDidMount() {\n    let cityArray = cities.map(city => {\n      return city.name;\n    });\n    this.setState({ cityArray });\n    this.getCurrentCityWeather();\n  }\n  render() {\n    return (\n      <div className=\"main-window\">\n        <span>\n          {this.state.spinner ? (\n            <Spinner />\n          ) : (\n            <span>\n              {this.state.message.length === 0 ? (\n                <Details data={this.state.data} />\n              ) : (\n                <div className=\"message\">{this.state.message}</div>\n              )}\n            </span>\n          )}\n          <SelectCity\n            updateCity={city => this.setState({ selectedCity: city })}\n            cityArray={this.state.cityArray}\n            selectedCity={this.state.selectedCity}\n            handleChange={this.handleChange}\n            search={this.search}\n          />\n          <div className=\"row\">\n            <button\n              className=\"btn btn-info\"\n              onClick={() => this.search(this.state.selectedCity)}\n            >\n              Search\n            </button>\n          </div>\n        </span>\n      </div>\n    );\n  }\n}\nexport default Weather;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Weather from \"./weather\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Weather />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}